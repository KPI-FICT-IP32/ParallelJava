===================================
Багатоотокове програмування на Java
===================================

Опис
====
В цьому репозиторії містяться лабораторні роботи з дисципліни «Багатоотокове програмування на Java».

Якщо бажаєте додати свою -- створіть папку зі своїм іменем та збережіть свої роботи у ній.


Завдання
========

.. note::

  Мені було ліньки перекладати, тому копіпащу як є

Постановка задачі
-----------------

С использованием средств синхронизации (буквы в функциях не менять!) разработать параллельную программу на Java для вычисления четырех математических функций (всего 7 лаб. работ).

Указания к выполнению лабораторных работ
----------------------------------------

- изучить средства java.util.concurrent и Fork/Join Framework, позволяющие выгодно использовать вычислительные мощности многоядерных процессоров (см., например, главу 28 Герберт Шилдт “Java8 Полное руководство”);
- для выбранной Вами размерности векторов и матриц (не меньше 10) написать многопоточное приложение, вычисляющее Ваш вариант задания и время его решения;
- все исходные данные – числа с плавающей точкой;
- сгенерировать, или ввести с клавиатуры, исходные данные, при этом обеспечить, чтобы порядки элементов матриц и векторов были не одинаковыми (чем больше будут отличаться порядки, тем будет более заметно, что стандартные математические законы для арифметики с плавающей точкой не выполняются);
- исходные данные сохранить в файл (во всех Ваших лабораторных работах исходные данные ввести из этого файла); 
- организовать вывод результатов вычисления функций в файл и их синхронизированный вывод на консоль из потоков, где они вычисляются;
- сравнить результаты вычисления функций для одних и тех же данных для разных «прогонов» Вашей параллельной программы (совпадают ли результаты вычислений?);
- если результаты вычислений для различных «прогонов» программы не совпадают, то переделать программу: сделать ее не такой быстрой, но более точной (добиться, чтобы результаты вычислений Вашей параллельной программы для одних и тех же данных совпадали при повторных запусках программы);
- сравнивать результаты вычисления лабораторной работы и время решения с соответствующими показателями предыдущей лабораторной работы (появился ли положительный эффект от использования новых средств параллелизма?);
- первую лабораторную работу выполнить на основе использования класса Thread, или интерфейса Runable;
- каждая следующая лабораторная работа должна быть выполнена с внедрением одного из изученного Вами средств из java.util.concurrent или Fork/Join Framework.

Ваіранти завдань
----------------

ВАРИАНТ 1
    #. А=В*(МС+MZ)+E*MM;
    #. МА=МВ*MО+МС*(МХ+MM);
    #. E=D*MT-min(D)*C;
    #. MC=D*MD*(MT+MZ)+(ME*MM)*a.

ВАРИАНТ 2
    #. А=В*(МС+MZ)+E*(MM-МО);
    #. МА=МВ*MО+МС*МХ-MM;
    #. MF =MD*(MT+MZ)-ME*MM;
    #. E=В*МС+D* max(MM).

ВАРИАНТ 3
    #. E=В*(МС+MZ)-A*(MM+МX);
    #. МА=МВ*MО+МС*(МХ-MM);
    #. MG =MD*(MT+MZ)-ME*MM;
    #. A=D*MT-max(C)*B.

ВАРИАНТ 4
    #. А=В*МС+D*MZ+E*MM;
    #. MG=MD*(MT+MZ)-ME*MM;
    #. MА=max(D+B)*MD*MT-MZ*ME*a;
    #. E=min(Z)*D*MT+B.

ВАРИАНТ 5
    #. А=В*МС+D*MZ; 
    #. МА=МВ*MK+МС*МХ;
    #. MА= min(D)*MD*MT+MZ*ME;
    #. E=В*МС-D*MX.

ВАРИАНТ 6
    #. А= В*МС+(D+C)*MZ; 
    #. МF= МВ*MK+МС*(МХ*MT);
    #. MА= min (D+C)*MD*MT+MZ*ME;
    #. D=В*МT+C*MX*a.

ВАРИАНТ 7
    #. А=В*МС+D*MM*a-B*MM;
    #. D=В*МZ+D*MX*a;
    #. МG=МВ*MK+МС*(МХ*MT+MM);
    #. MА=max(B-D)*MD*MT-MZ*(ME+MM).

ВАРИАНТ 8
    #. А=В*МС+D*MZ+E*MM;
    #. C=В*МС-D*MM;
    #. МА=МВ*MK+МС*МХ*(MT+MM);
    #. MF=min(D+C)*MD*MT+MZ*(ME+MM)*a.

ВАРИАНТ 9
    #. А=В*(МС+MZ)+E*MM;
    #. МG=МВ*MО+МС*(МХ+MM);
    #. E=В*МС+D* min(MZ);
    #. MА=a*MD*(MC-MX)+ME*MM*a.

ВАРИАНТ 10
    #. B=E*(МС+MZ)+E*(MM-МО);
    #. МG=МВ*MО+МС*(МХ-MM);
    #. MА=MD*(MT+MZ)-(ME*MM);
    #. A= min(В)*МZ-D*MX*a.

ВАРИАНТ 11
    #. А=В*(МС+MZ)+E*(MM-МО);
    #. МG=МВ*MО+МС*(МХ+MM);
    #. E=D*MT+max(B)*C;
    #. MА=MD*(MT+MZ)-ME*MM.

ВАРИАНТ 12
    #. А=В*МС+D*MZ+E*MM;
    #. D=В*МZ-E*MM*a;
    #. MА=MD*(MT+MZ)-ME*MM;
    #. MG=min(D+C)*MD*MT-MZ*ME.
	
ВАРИАНТ 13
    #. А=В*(МС+MZ)+E*MM;
    #. МF=МВ*MО+МС*(МХ+MM);
    #. В=D*MT-min(D)*C;
    #. MА=D*MD*(MT+MZ)+(ME*MM)*a.

ВАРИАНТ 14
    #. А=В*(МС+MZ)+E*MM-МО;
    #. МG=МВ*MО+МС*МХ-MM;
    #. MА = max(MD)*(MT+MZ)-ME*MM;
    #. E=В*МС+D*MM.

ВАРИАНТ 15
    #. D=В*(МС+MZ)-E*MM+МX;
    #. МF=МВ*MО+МС*МХ-MM);
    #. MА =MD*MT+MZ-ME*MM;
    #. A=D*MT-max(C)*B.

ВАРИАНТ 16
    #. Z=В*МС+D*MZ+E*MM;
    #. MG=MD*(MT+MZ)-ME*MM;
    #. MА=max(D+B)*MD*MT-MZ*ME*a;
    #. А=min(Z)*D*MT+B.

ВАРИАНТ 17
    #. В=A*МС+D*MZ; 
    #. МG=МВ*MK+МС*МХ;
    #. MА= min(D)*MD*MT+MZ*ME;
    #. E=В*МС-D*MX.

ВАРИАНТ 18
    #. А= В*МС+(D+C)*MZ; 
    #. МF= МВ*MX+МС*МХ*MT;
    #. MА= min(D+ В)*MD*MT+MZ*ME;
    #. C=В*МT+D*MX*a.

ВАРИАНТ 19
    #. А=В*МС+C*MM*a-B*MM;
    #. C=В*МZ+D*MX*a;
    #. МG=МM*MK+МС*(МХ*MT+MM);
    #. MА=max(B-D)*MD*MT-MZ*(ME+MM).

ВАРИАНТ 20
    #. А=В*МС+D*MZ+E*MM;
    #. E=В*МС-D*MM;
    #. МА=МВ*MK+МС*(МХ*MT+MM);
    #. MZ=min(D+C)*MD*MT+MX*(ME+MM)*a.

ВАРИАНТ 21
    #. E=В*(МС+MZ)+ D*MM;
    #. А= C*МС+D*MZ;
    #. MА= min(MD)*(MT+MZ)-ME*MM;
    #. C=В*МZ-D*MX*a.

ВАРИАНТ 22
    #. C=В*(МС+MZ)+E*MM-МО;
    #. А=В*МС+D*MZ;
    #. MА=b*max(MD)*(MC-MX)+ME*MM;
    #. МD=МВ*MО+МС*(МХ-MM).
